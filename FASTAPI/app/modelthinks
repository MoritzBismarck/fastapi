# This is what Alembic expects your models.py to look like based on migration history
# Generated from migrations: b5c350ae7c41 -> 496855faa98c -> 9e07396322d7 -> 20048dfc1297 -> aff5b7eba7f5 -> 59ab10f18716

from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, TIMESTAMP, text, Date, Time, UniqueConstraint, Enum
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.dialects import postgresql

Base = declarative_base()

# Enums as defined in migrations
event_visibility = postgresql.ENUM('PUBLIC', 'PRIVATE', 'FRIENDS', name='event_visibility')
event_status = postgresql.ENUM('ACTIVE', 'CANCELLED', 'COMPLETED', name='event_status') 
rsvp_status = postgresql.ENUM('INTERESTED', 'GOING', 'CANCELLED', name='rsvp_status')
match_context = postgresql.ENUM('PUBLIC', 'PRIVATE', 'FRIENDS', name='match_context')

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, nullable=False)
    username = Column(String, nullable=True)  # Still nullable based on migration b5c350ae7c41
    email = Column(String, nullable=False)
    password = Column(String, nullable=False)
    first_name = Column(String, nullable=True)  # Still exists according to migrations
    last_name = Column(String, nullable=True)   # Still exists according to migrations
    profile_picture = Column(String, nullable=True)
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text("now()"))
    invitation_token_id = Column(Integer, ForeignKey("invitation_tokens.id", ondelete="SET NULL"), nullable=True)
    is_public = Column(Boolean, nullable=False, server_default="TRUE")  # Added in 496855faa98c

class InvitationToken(Base):
    __tablename__ = "invitation_tokens"
    
    id = Column(Integer, primary_key=True, nullable=False)
    token = Column(String, nullable=False, unique=True)
    description = Column(String, nullable=True)
    usage_count = Column(Integer, server_default="0", nullable=False)
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text("now()"))
    created_by = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=True)
    expires_at = Column(TIMESTAMP(timezone=True), nullable=False)
    session_token = Column(String, nullable=True)

class Event(Base):
    __tablename__ = 'events'
    
    # Based on b5c350ae7c41 migration - OLD FIELD NAMES
    id = Column(Integer, primary_key=True, nullable=False)
    title = Column(String, nullable=True)  # Was nullable in initial migration
    description = Column(String, nullable=False)
    start_date = Column(Date, nullable=False)
    end_date = Column(Date, nullable=True)
    start_time = Column(String, nullable=False)  # Was String, not Time!
    end_time = Column(String, nullable=True)
    place = Column(String, nullable=False)  # Was 'place', not 'location'!
    image_url = Column(String, nullable=False)  # Was 'image_url', not 'cover_photo_url'!
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    created_by = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)  # Was 'created_by', not 'creator_id'!

class Friendship(Base):
    __tablename__ = "friendships"
    
    id = Column(Integer, primary_key=True, nullable=False)
    requester_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    addressee_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    status = Column(String, nullable=False)
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text("now()"))
    updated_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text("now()"))
    
    __table_args__ = (
        UniqueConstraint('requester_id', 'addressee_id', name='unique_friendship'),
    )

class Notification(Base):
    __tablename__ = "notifications"
    
    id = Column(Integer, primary_key=True, nullable=False)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    content = Column(String, nullable=False)
    is_read = Column(Boolean, server_default="False", nullable=False)
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text("now()"))

# Posts table - should still exist according to migrations (only removed in the new migration)
class Post(Base):
    __tablename__ = 'posts'
    
    id = Column(Integer, primary_key=True, nullable=False)
    title = Column(String, nullable=False)
    content = Column(String, nullable=False)
    published = Column(Boolean, server_default='True', nullable=False)
    created_at = Column(TIMESTAMP(timezone=True), server_default=text('now()'), nullable=False)
    owner_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)

class EventLike(Base):
    __tablename__ = 'event_likes'
    
    # After 20048dfc1297 migration changes:
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), primary_key=True)
    event_id = Column(Integer, ForeignKey('events.id', ondelete='CASCADE'), primary_key=True) 
    liked_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    
    __table_args__ = (
        UniqueConstraint('user_id', 'event_id', name='uc_like_user_event'),
    )

class ChatSession(Base):
    __tablename__ = "chat_sessions"
    
    id = Column(Integer, primary_key=True, nullable=False)
    session_uuid = Column(String, nullable=False, unique=True)
    caretaker_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    helpseeker_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    started_at = Column(TIMESTAMP(timezone=True), nullable=False)
    ended_at = Column(TIMESTAMP(timezone=True), nullable=True)
    end_reason = Column(String, nullable=True)

# From 20048dfc1297 migration:
class EventEdit(Base):
    __tablename__ = 'event_edits'
    
    id = Column(Integer, primary_key=True, nullable=False)
    event_id = Column(Integer, ForeignKey('events.id', ondelete='CASCADE'), nullable=False)
    editor_id = Column(Integer, ForeignKey('users.id', ondelete='SET NULL'), nullable=True)
    changed_fields = Column(String, nullable=False)
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))

class Match(Base):
    __tablename__ = 'matches'
    
    id = Column(Integer, primary_key=True, nullable=False)
    event_id = Column(Integer, ForeignKey('events.id', ondelete='CASCADE'), nullable=False)
    context = Column(match_context, nullable=False, server_default='PUBLIC')
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    last_message_at = Column(TIMESTAMP(timezone=True), nullable=True)

class RSVP(Base):
    __tablename__ = 'rsvps'
    
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), primary_key=True)
    event_id = Column(Integer, ForeignKey('events.id', ondelete='CASCADE'), primary_key=True)
    status = Column(rsvp_status, nullable=False, server_default='GOING')
    responded_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    
    __table_args__ = (
        UniqueConstraint('user_id', 'event_id', name='uc_rsvp_user_event'),
    )

class MatchParticipant(Base):
    __tablename__ = 'match_participants'
    
    match_id = Column(Integer, ForeignKey('matches.id', ondelete='CASCADE'), primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), primary_key=True)
    joined_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    unread_count = Column(Integer, nullable=False, server_default='0')
    
    __table_args__ = (
        UniqueConstraint('match_id', 'user_id', name='uc_match_participant'),
    )

# From aff5b7eba7f5 migration:
class EventMessage(Base):
    __tablename__ = 'event_messages'
    
    id = Column(Integer, primary_key=True, nullable=False)
    event_id = Column(Integer, ForeignKey('events.id', ondelete='CASCADE'), nullable=False)
    sender_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)
    content = Column(String, nullable=False)
    sent_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))

# From 59ab10f18716 migration:
class Comment(Base):
    __tablename__ = 'comments'
    
    id = Column(Integer, primary_key=True, nullable=False)
    content = Column(String, nullable=False)
    like_count = Column(Integer, nullable=False, server_default='0')
    reply_count = Column(Integer, nullable=False, server_default='0')
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    updated_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    author_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)

class Feature(Base):
    __tablename__ = 'features'
    
    id = Column(Integer, primary_key=True, nullable=False)
    title = Column(String, nullable=False)
    description = Column(String, nullable=False)
    vote_count = Column(Integer, nullable=False, server_default='0')
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    updated_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    created_by = Column(Integer, ForeignKey('users.id', ondelete='SET NULL'), nullable=True)

class CommentLike(Base):
    __tablename__ = 'comment_likes'
    
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), primary_key=True)
    comment_id = Column(Integer, ForeignKey('comments.id', ondelete='CASCADE'), primary_key=True)
    liked_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    
    __table_args__ = (
        UniqueConstraint('user_id', 'comment_id', name='uc_comment_like_user_comment'),
    )

class CommentReply(Base):
    __tablename__ = 'comment_replies'
    
    id = Column(Integer, primary_key=True, nullable=False)
    content = Column(String, nullable=False)
    like_count = Column(Integer, nullable=False, server_default='0')
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    updated_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    comment_id = Column(Integer, ForeignKey('comments.id', ondelete='CASCADE'), nullable=False)
    author_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)

class FeatureVote(Base):
    __tablename__ = 'feature_votes'
    
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), primary_key=True)
    feature_id = Column(Integer, ForeignKey('features.id', ondelete='CASCADE'), primary_key=True)
    voted_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    
    __table_args__ = (
        UniqueConstraint('user_id', 'feature_id', name='uc_feature_vote_user_feature'),
    )

class CommentReplyLike(Base):
    __tablename__ = 'comment_reply_likes'
    
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), primary_key=True)
    reply_id = Column(Integer, ForeignKey('comment_replies.id', ondelete='CASCADE'), primary_key=True)
    liked_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))
    
    __table_args__ = (
        UniqueConstraint('user_id', 'reply_id', name='uc_reply_like_user_reply'),
    )